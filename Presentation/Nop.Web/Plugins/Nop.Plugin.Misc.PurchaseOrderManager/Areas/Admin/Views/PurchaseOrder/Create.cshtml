@model Nop.Plugin.Misc.PurchaseOrderManager.Areas.Admin.Models.PurchaseOrderModel
@{
	Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
	ViewBag.PageTitle = T("Admin.PurchaseOrders.Create").Text;
}

<form asp-controller="PurchaseOrderManager" asp-action="Create" method="post" id="create-form">
	<div class="content-header clearfix">
		<h1 class="float-left">@T("Admin.PurchaseOrders.Create")</h1>
	</div>

	<div class="content">
		<div class="form-horizontal">
			<div class="form-group row align-items-center">
				<label asp-for="SupplierId" class="col-form-label col-md-2 text-right">@T("Admin.PurchaseOrders.SelectSupplierPrompt")</label>
				<div class="col-md-6">
					<select asp-for="SupplierId" asp-items="Model.AvailableSuppliers" class="form-control" id="SupplierId">
						<option value="">@T("Admin.PurchaseOrders.SelectSupplierPrompt")</option>
					</select>
				</div>
			</div>

			<div class="form-group row">
				<div class="col-md-2 offset-md-2">
					<button type="button" id="add-product-btn" class="btn btn-primary">
						<i class="fas fa-plus"></i> @T("Admin.PurchaseOrders.AddProduct")
					</button>
				</div>
			</div>

			<!-- Selected Products Panel -->
			<div id="selected-products-container" class="form-group">
				<div class="card">
					<div class="card-header">
						<h5>@T("Admin.PurchaseOrders.SelectedProducts")</h5>
					</div>
					<div class="card-body">
						<div class="table-responsive">
							<table class="table table-bordered table-hover dataTable">
								<thead>
									<tr>
										<th>@T("Admin.Catalog.Products.Fields.Name")</th>
										<th>@T("Admin.Catalog.Products.Fields.Price")</th>
										<th>@T("Admin.Catalog.Products.Fields.Quantity")</th>
										<th>@T("Admin.Catalog.Products.Fields.LinePrice")</th>
										<th class="text-center">@T("Admin.Common.Edit")</th
										<th class="text-center">@T("Admin.Common.Remove")</th>
									</tr>
								</thead>
								<tbody id="selected-products-body"></tbody>
							</table>
						</div>
						<div id="no-products-selected" class="alert alert-info">
							@T("Admin.PurchaseOrders.NoProductsSelected")
						</div>
					</div>
				</div>
			</div>

			<!-- Hidden inputs -->
			<div id="selected-products-inputs"></div>
		</div>
	</div>
</form>

@section Scripts {
	<script>
		let selectedProducts = [];

		$(document).ready(function () {
			updateSelectedProductsUI();

			$('#SupplierId').change(function () {
				const supplierId = $(this).val();
				if (!supplierId) {
					$('#selected-products-container').hide();
					selectedProducts = [];
					updateSelectedProductsUI();
				} else {
					$('#add-product-btn').show();
				}
			});

			$('#add-product-btn').click(function () {
				const supplierId = $('#SupplierId').val();
				if (!supplierId) return;

				const width = 800;
				const height = 600;
				const left = (window.screen.width / 2) - (width / 2);
				const top = (window.screen.height / 2) - (height / 2);

				const popupWindow = window.open(
					'@Url.Action("ProductSelectionPopup", "PurchaseOrderManager")?supplierId=' + supplierId,
					'ProductSelectionPopup',
					'width=' + width + ',height=' + height + ',top=' + top + ',left=' + left
				);

				popupWindow.opener = window;
				popupWindow.parentSelectedProducts = selectedProducts;

				return false;
			});

			$('#create-form').submit(function (e) {
				if (selectedProducts.length === 0) {
					alert('@T("Admin.PurchaseOrders.SelectAtLeastOneProduct")');
					e.preventDefault();
					return false;
				}
			});
		});

		function receiveSelectedProducts(products) {
			products.forEach(product => {
				const exists = selectedProducts.some(p => p.id === product.id);
				if (!exists) {
					product.price = parseFloat(product.price || 0);
					product.quantity = 1;
					selectedProducts.push(product);
				}
			});
			$('#selected-products-container').show();
			updateSelectedProductsUI();
		}

		function removeProduct(productId) {
			selectedProducts = selectedProducts.filter(p => p.id !== productId);
			updateSelectedProductsUI();
		}

		function editProduct(productId) {
			const row = $('#product-row-' + productId);
			const product = selectedProducts.find(p => p.id === productId);
			if (!product) return;

			row.find('.price-cell').html('<input type="number" step="0.01" class="form-control price-input" value="' + product.price + '">');
			row.find('.qty-cell').html('<input type="number" class="form-control qty-input" value="' + product.quantity + '">');
			row.find('.edit-btn').html('<button type="button" class="btn btn-success btn-sm" onclick="saveProduct(' + product.id + ')">Save</button>');
		}

		function saveProduct(productId) {
			const row = $('#product-row-' + productId);
			const price = parseFloat(row.find('.price-input').val());
			const quantity = parseInt(row.find('.qty-input').val());
			const product = selectedProducts.find(p => p.id === productId);

			if (product && !isNaN(price) && !isNaN(quantity)) {
				product.price = price;
				product.quantity = quantity;
			}

			updateSelectedProductsUI();
		}

		function updateSelectedProductsUI() {
			const tbody = $('#selected-products-body');
			const inputs = $('#selected-products-inputs');

			tbody.empty();
			inputs.empty();

			if (selectedProducts.length === 0) {
				$('#no-products-selected').show();
				return;
			}

			$('#no-products-selected').hide();

			selectedProducts.forEach(product => {
				const linePrice = (product.price * product.quantity).toFixed(2);

				tbody.append(`
					<tr id="product-row-${product.id}">
						<td>${product.name}</td>
						<td class="price-cell">${product.price.toFixed(2)}</td>
						<td class="qty-cell">${product.quantity}</td>
						<td>${linePrice}</td>
						<td class="edit-btn text-center">
							<button type="button" class="btn btn-sm btn-primary" onclick="editProduct(${product.id})">Edit</button>
						</td>
						<td class="text-center">
							<button type="button" class="btn btn-sm btn-danger" onclick="removeProduct(${product.id})">
								<i class="fas fa-times"></i>
							</button>
						</td>
					</tr>
				`);

				inputs.append(`
					<input type="hidden" name="SelectedProducts[${product.id}].ProductId" value="${product.id}" />
					<input type="hidden" name="SelectedProducts[${product.id}].Price" value="${product.price}" />
					<input type="hidden" name="SelectedProducts[${product.id}].Quantity" value="${product.quantity}" />
				`);
			});
		}
	</script>
}
